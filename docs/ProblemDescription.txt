For our project we will consider the following logic puzzle.
---------------------------------------------------------------
Assume we have 2 agents, both are perfect logicians. Let us pick 2 random positive integers smaller than 100. We tell agent 1 the sum of these numbers and we tell agent 2 the product of these numbers. Both know this. Then the following conversations occurs between the agents:

Agent 2: I do not know the numbers.
Agent 1: I do not know the numbers.
Agent 2: I do not know the numbers.
Agent 1: I do not know the numbers.
Agent 2: I do not know the numbers.
Agent 1: I do not know the numbers.
Agent 2: I do not know the numbers.
Agent 1: I do not know the numbers.
Agent 2: I do not know the numbers.
Agent 1: I do not know the numbers.
Agent 2: I do not know the numbers.
Agent 1: I do not know the numbers.
Agent 2: I do not know the numbers.
Agent 1: I do not know the numbers.


Agent 2: I do know the numbers!

What are the numbers?
---------------------------------------------------------------

This problem looks quite intimidating at first, but the problem reduces relatively quickly when using a computer. We will start by noting that the pairs of numbers have no inherent ordering to them, hence the pairs (3,7) and (7,3) are equivalent. From here on we will denote each pair as (x,y) with x<=y. 
The puzzle is very similar to Rinekes birthday problem discussed during the course. 
We start by constructing all possible initial states and reduce the number of states after each announcement. 
In order to implement this we can apply different approaches. 
The naive approach would be to generate all possible pairs, let us assume the random numbers are smaller than 6. 
Then we use these to generate a set of all sums and products.
sums = {
    2  : [(1,1)],
    3  : [(1,2)],
    4  : [(1,3), (2,2)],
    5  : [(1,4), (2,3)],
    6  : [(1,5), (2,4), (3,3)],
    7  : [(1,6), (2,5), (3,4)],
    8  : [(2,6), (3,5), (4,4)],
    9  : [(3,6), (4,5)],
    10 : [(4,6), (5,5)],
    11 : [(5,6)],
    12 : [(6,6)]
}
products = {
    1  : [(1,1)],
    2  : [(1,2)],
    3  : [(1,3)],
    4  : [(1,4), (2,2)],
    5  : [(1,5)],
    6  : [(1,6), (2,3)],
    8  : [(2,4)],
    9  : [(3,3)],
    10 : [(2,5)],
    12 : [(2,6), (3,4)],
    15 : [(2,5)],
    16 : [(4,4)],
    18 : [(3,6)],
    20 : [(4,5)],
    24 : [(4,6)],
    25 : [(5,5)],
    28 : [(5,6)],
    36 : [(6,6)]
}
Then, when agent 2 announced that they do not know the numbers, then we know that it is not any product with only a single possible pair.
We can then reduce the set of possible pairs by removing all pairs which do not have any other pairs with the same product.
If agent 2 did know the numbers in the first step then agent 1 would know that the numbers correspond to a pair one of those pairs.
Similarly, when agent 1 announces that they do not know the number, we can remove all pairs for which there does not exist another pair with the same sum from the set of possible pairs.

In order to find the solution to the provided puzzle we need to find the pair which is removed at the 15'th announcement. 
This solution can easily be computed using the provided code (TODO, update this). When running the code we find that the pair (77,84) is removed at this iteration.

However, for this puzzle we assumed that at a specific point in the conversation one of the agents knew the numbers. 
However, one may ask if there always exists a solution to this problem assuming 2 arbitrary random integers below a predefined threshold. 

In the next section we will look at the generalizability of this problem and look if there are specific conditions which are necessary and or sufficient for convergence. 
We will also restate the puzzle in terms of a logic language (TODO: more specific) and consider if the problem can still be solved without the prior knowledge about the upper bound of the generated random numbers.

# State the problem in terms of epistemic logic
# Generalisability of puzzle to arbitrary random values
## Necessary conditions for convergence?
## Sufficient conditions for convergence?
# Generalisability if we do not provide random number bound

